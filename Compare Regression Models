import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load refined dataset
df = pd.read_csv("cars_refined.csv")

# -----------------------------
# Feature Engineering
# -----------------------------
df["Car_Age"] = 2025 - df["Year"]

# Encode categorical features
cat_cols = ["Brand", "Model", "Fuel_Type", "Transmission", "Owner_Type"]
le = LabelEncoder()
for col in cat_cols:
    df[col] = le.fit_transform(df[col])

if "Car_ID" in df.columns:
    df.drop("Car_ID", axis=1, inplace=True)

# Train-Test Split
X = df.drop("Price", axis=1)
y = df["Price"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# -----------------------------
# Models
# -----------------------------
models = {}

# 1. Linear Regression
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)
y_pred_lin = lin_reg.predict(X_test)
models["Linear Regression"] = (y_pred_lin, r2_score(y_test, y_pred_lin))

# 2. Multi Linear Regression (same as Linear Regression in sklearn, just multiple features)
multi_reg = LinearRegression()
multi_reg.fit(X_train, y_train)
y_pred_multi = multi_reg.predict(X_test)
models["Multi Linear Regression"] = (y_pred_multi, r2_score(y_test, y_pred_multi))

# 3. Polynomial Regression
poly = PolynomialFeatures(degree=2)
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

poly_reg = LinearRegression()
poly_reg.fit(X_train_poly, y_train)
y_pred_poly = poly_reg.predict(X_test_poly)
models["Polynomial Regression"] = (y_pred_poly, r2_score(y_test, y_pred_poly))

# 4. Random Forest
rf_reg = RandomForestRegressor(n_estimators=200, random_state=42)
rf_reg.fit(X_train, y_train)
y_pred_rf = rf_reg.predict(X_test)
models["Random Forest"] = (y_pred_rf, r2_score(y_test, y_pred_rf))

# -----------------------------
# Scatter Plots for Comparison
# -----------------------------
for name, (y_pred, r2) in models.items():
    plt.figure(figsize=(7,5))
    plt.scatter(y_test, y_pred, alpha=0.6)
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
    plt.xlabel("Actual Price")
    plt.ylabel("Predicted Price")
    plt.title(f"Actual vs Predicted Prices - {name} (R2={r2:.2f})")
    plt.show()

# -----------------------------
# Results Summary
# -----------------------------
for name, (y_pred, r2) in models.items():
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    print(f"{name}: R2={r2:.3f}, RMSE={rmse:.2f}")
