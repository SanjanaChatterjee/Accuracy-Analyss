import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load refined dataset
df = pd.read_csv("cars_refined.csv")

# -----------------------------
# Feature Engineering
# -----------------------------
df["Car_Age"] = 2025 - df["Year"]

# Encode categorical variables
cat_cols = ["Brand", "Model", "Fuel_Type", "Transmission", "Owner_Type"]
le = LabelEncoder()
for col in cat_cols:
    df[col] = le.fit_transform(df[col])

if "Car_ID" in df.columns:
    df.drop("Car_ID", axis=1, inplace=True)

# -----------------------------
# Train-Test Split
# -----------------------------
X = df.drop("Price", axis=1)
y = df["Price"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# -----------------------------
# Models for Comparison
# -----------------------------
models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(random_state=42),
    "Random Forest": RandomForestRegressor(n_estimators=200, random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=200, random_state=42)
}

results = []

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)

    results.append([name, mae, rmse, r2])

# -----------------------------
# Results DataFrame
# -----------------------------
results_df = pd.DataFrame(results, columns=["Model", "MAE", "RMSE", "R2"])
print(results_df)

# -----------------------------
# Visualization
# -----------------------------
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10,6))
sns.barplot(data=results_df, x="Model", y="R2")
plt.title("Model Comparison - R2 Score")
plt.show()

plt.figure(figsize=(10,6))
sns.barplot(data=results_df, x="Model", y="RMSE")
plt.title("Model Comparison - RMSE")
plt.show()
